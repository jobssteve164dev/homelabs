// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          Role      @default(USER)
  avatar        String?
  isActive      Boolean   @default(true)      // 账户状态：true=正常，false=已冻结
  
  // 星系相关字段
  galaxyJoinedAt DateTime  @default(now())   // 加入AI宇宙的时间（用于星系排序）
  galaxyX        Float?                      // 星系中心X坐标（持久化）
  galaxyY        Float?                      // 星系中心Y坐标
  galaxyZ        Float?                      // 星系中心Z坐标
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // 关联关系
  projects      Project[]
  sessions      Session[]
  accounts      Account[]
  
  @@map("users")
}

// 项目模型
model Project {
  id            String      @id @default(cuid())
  title         String
  description   String
  category      String
  tags          String[]
  
  // 星系相关字段
  projectType   ProjectType @default(PLANET)  // 项目类型
  
  // 个人介绍卡片字段（仅恒星项目使用）
  userBio       String?                       // 用户简介
  userTitle     String?                       // 用户头衔
  userSkills    String[]    @default([])      // 用户技能标签
  socialLinks   Json?                         // 社交链接 {github, linkedin, twitter, etc.}
  
  // 空间坐标（持久化，避免每次计算）
  orbitRadius   Float?                        // 行星轨道半径
  orbitAngle    Float?                        // 行星轨道初始角度
  orbitSpeed    Float?                        // 行星公转速度
  
  demoUrl       String?
  githubUrl     String?
  imageUrl      String?
  isActive      Boolean     @default(true)
  viewCount     Int         @default(0)
  likeCount     Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // 关联关系
  authorId      String
  author        User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@unique([title, authorId])
  @@map("projects")
}

// NextAuth.js 相关模型
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// 枚举类型
enum Role {
  USER
  ADMIN
}

// 项目类型枚举
enum ProjectType {
  STAR      // 恒星项目（用户个人介绍）
  PLANET    // 行星项目（AI工具）
}
